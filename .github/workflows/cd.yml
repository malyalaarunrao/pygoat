name: CD-pipeline

on:
  workflow_dispatch:
    inputs:
      ci_run_id:
        description: 'CI Run ID to pull artifacts from'
        required: false
        type: string

  workflow_run:
    workflows: ["CI-Pipeline"]
    types:
      - completed

jobs:
  test:
    runs-on: ubuntu-latest
    environment: common
    env:
      TF_HOME: terraform
    steps:
      - name: Download the Terraform Artifact
        uses: actions/download-artifact@v4.3.0
        with:
          name: terraform
          path: ${{ env.TF_HOME }}
          run-id: ${{ github.event.workflow_run.id || inputs.ci_run_id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Run Terraform for TEST
        run: |
          cd ${{ env.TF_HOME }}
          export TF_WORKSPACE="pygoat-test"
          terraform init
          terraform apply -var-file="variable_values/test.tfvars" -input=false -auto-approve
          cd -

  prod:
    needs: test
    runs-on: ubuntu-latest
    environment: common
    env:
      TF_HOME: terraform
    steps:
      - name: Download the Terraform Artifact
        uses: actions/download-artifact@v4.3.0
        with:
          name: terraform
          path: ${{ env.TF_HOME }}
          run-id: ${{ github.event.workflow_run.id || inputs.ci_run_id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Run Terraform for TEST
        run: |
          cd ${{ env.TF_HOME }}
          export TF_WORKSPACE="pygoat-test"
          terraform init
          terraform apply -var-file="variable_values/test.tfvars" -input=false -auto-approve
          cd -

    
   


      
      #- name: Run Terraform for PROD
       # run: |
        #  cd ${{ env.TF_HOME }}
        #  export TF_WORKSPACE="pygoat-prod"
        #  terraform init
        #  terraform apply -var-file="variable_values/prod.tfvars" -input=false -auto-approve
        #  cd -

  dast-scan:
    needs: prod
    runs-on: ubuntu-latest
    steps:
      - name: OWASP ZAP DAST Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://app-arun-devsecopsapp-prod.azurewebsites.net'  
          format: sarif
          output: zap.sarif
          fail-action: false

      - name: Upload ZAP SARIF Report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: zap.sarif
